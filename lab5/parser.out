Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions
Rule 2     instructions -> instructions instruction
Rule 3     instructions -> <empty>
Rule 4     instruction -> { instructions }
Rule 5     instruction -> BREAK ;
Rule 6     instruction -> CONTINUE ;
Rule 7     instruction -> assignment ;
Rule 8     instruction -> instruction_if
Rule 9     instruction -> instruction_loop
Rule 10    instruction -> instruction_print ;
Rule 11    instruction -> instruction_return ;
Rule 12    assignment -> identifier = operations
Rule 13    assignment -> identifier ADDITION_ASSIGN operations
Rule 14    assignment -> identifier MULTIPLICATION_ASSIGN operations
Rule 15    assignment -> identifier SUBTRACTION_ASSIGN operations
Rule 16    assignment -> identifier DIVISION_ASSIGN operations
Rule 17    instruction_if -> IF ( condition ) instruction
Rule 18    instruction_if -> IF ( condition ) instruction ELSE instruction
Rule 19    instruction_loop -> FOR ID = operations : operations instruction
Rule 20    instruction_loop -> WHILE ( condition ) instruction
Rule 21    instruction_print -> PRINT operations_list
Rule 22    instruction_return -> RETURN operations
Rule 23    instruction_return -> RETURN
Rule 24    condition -> operations
Rule 25    operations -> ( operations )
Rule 26    operations -> operations + operations
Rule 27    operations -> operations - operations
Rule 28    operations -> operations * operations
Rule 29    operations -> operations / operations
Rule 30    operations -> operations > operations
Rule 31    operations -> operations < operations
Rule 32    operations -> operations GREATER_OR_EQUAL operations
Rule 33    operations -> operations LESS_OR_EQUAL operations
Rule 34    operations -> operations NOT_EQUAL operations
Rule 35    operations -> operations EQUAL operations
Rule 36    operations -> operations PLUS_MATRIX operations
Rule 37    operations -> operations MINUS_MATRIX operations
Rule 38    operations -> operations MULTIPLY_MATRIX operations
Rule 39    operations -> operations DIVIDE_MATRIX operations
Rule 40    operations -> operations '
Rule 41    operations -> array
Rule 42    operations -> value
Rule 43    operations -> - operations
Rule 44    value -> FLOAT
Rule 45    value -> INT
Rule 46    value -> STRING
Rule 47    value -> ZEROS ( operations_list )
Rule 48    value -> ONES ( operations_list )
Rule 49    value -> EYE ( operations_list )
Rule 50    value -> identifier
Rule 51    identifier -> ID
Rule 52    identifier -> ID [ operations_list ]
Rule 53    array -> [ operations_list ]
Rule 54    operations_list -> operations_list , operations
Rule 55    operations_list -> operations

Terminals, with rules where they appear

'                    : 40
(                    : 17 18 20 25 47 48 49
)                    : 17 18 20 25 47 48 49
*                    : 28
+                    : 26
,                    : 54
-                    : 27 43
/                    : 29
:                    : 19
;                    : 5 6 7 10 11
<                    : 31
=                    : 12 19
>                    : 30
ADDITION_ASSIGN      : 13
BREAK                : 5
CONTINUE             : 6
DIVIDE_MATRIX        : 39
DIVISION_ASSIGN      : 16
ELSE                 : 18
EQUAL                : 35
EYE                  : 49
FLOAT                : 44
FOR                  : 19
GREATER_OR_EQUAL     : 32
ID                   : 19 51 52
IF                   : 17 18
INT                  : 45
LESS_OR_EQUAL        : 33
MINUS_MATRIX         : 37
MULTIPLICATION_ASSIGN : 14
MULTIPLY_MATRIX      : 38
NOT_EQUAL            : 34
ONES                 : 48
PLUS_MATRIX          : 36
PRINT                : 21
RETURN               : 22 23
STRING               : 46
SUBTRACTION_ASSIGN   : 15
WHILE                : 20
ZEROS                : 47
[                    : 52 53
]                    : 52 53
error                : 
{                    : 4
}                    : 4

Nonterminals, with rules where they appear

array                : 41
assignment           : 7
condition            : 17 18 20
identifier           : 12 13 14 15 16 50
instruction          : 2 17 18 18 19 20
instruction_if       : 8
instruction_loop     : 9
instruction_print    : 10
instruction_return   : 11
instructions         : 1 2 4
operations           : 12 13 14 15 16 19 19 22 24 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 43 54 55
operations_list      : 21 47 48 49 52 53 54
program              : 0
value                : 42

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> .

    {               reduce using rule 3 (instructions -> .)
    BREAK           reduce using rule 3 (instructions -> .)
    CONTINUE        reduce using rule 3 (instructions -> .)
    IF              reduce using rule 3 (instructions -> .)
    FOR             reduce using rule 3 (instructions -> .)
    WHILE           reduce using rule 3 (instructions -> .)
    PRINT           reduce using rule 3 (instructions -> .)
    RETURN          reduce using rule 3 (instructions -> .)
    ID              reduce using rule 3 (instructions -> .)
    $end            reduce using rule 3 (instructions -> .)

    program                        shift and go to state 1
    instructions                   shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions .
    (2) instructions -> instructions . instruction
    (4) instruction -> . { instructions }
    (5) instruction -> . BREAK ;
    (6) instruction -> . CONTINUE ;
    (7) instruction -> . assignment ;
    (8) instruction -> . instruction_if
    (9) instruction -> . instruction_loop
    (10) instruction -> . instruction_print ;
    (11) instruction -> . instruction_return ;
    (12) assignment -> . identifier = operations
    (13) assignment -> . identifier ADDITION_ASSIGN operations
    (14) assignment -> . identifier MULTIPLICATION_ASSIGN operations
    (15) assignment -> . identifier SUBTRACTION_ASSIGN operations
    (16) assignment -> . identifier DIVISION_ASSIGN operations
    (17) instruction_if -> . IF ( condition ) instruction
    (18) instruction_if -> . IF ( condition ) instruction ELSE instruction
    (19) instruction_loop -> . FOR ID = operations : operations instruction
    (20) instruction_loop -> . WHILE ( condition ) instruction
    (21) instruction_print -> . PRINT operations_list
    (22) instruction_return -> . RETURN operations
    (23) instruction_return -> . RETURN
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    $end            reduce using rule 1 (program -> instructions .)
    {               shift and go to state 4
    BREAK           shift and go to state 5
    CONTINUE        shift and go to state 6
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    PRINT           shift and go to state 17
    RETURN          shift and go to state 18
    ID              shift and go to state 15

    instruction                    shift and go to state 3
    assignment                     shift and go to state 7
    instruction_if                 shift and go to state 8
    instruction_loop               shift and go to state 9
    instruction_print              shift and go to state 10
    instruction_return             shift and go to state 11
    identifier                     shift and go to state 12

state 3

    (2) instructions -> instructions instruction .

    {               reduce using rule 2 (instructions -> instructions instruction .)
    BREAK           reduce using rule 2 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 2 (instructions -> instructions instruction .)
    IF              reduce using rule 2 (instructions -> instructions instruction .)
    FOR             reduce using rule 2 (instructions -> instructions instruction .)
    WHILE           reduce using rule 2 (instructions -> instructions instruction .)
    PRINT           reduce using rule 2 (instructions -> instructions instruction .)
    RETURN          reduce using rule 2 (instructions -> instructions instruction .)
    ID              reduce using rule 2 (instructions -> instructions instruction .)
    $end            reduce using rule 2 (instructions -> instructions instruction .)
    }               reduce using rule 2 (instructions -> instructions instruction .)


state 4

    (4) instruction -> { . instructions }
    (2) instructions -> . instructions instruction
    (3) instructions -> .

    }               reduce using rule 3 (instructions -> .)
    {               reduce using rule 3 (instructions -> .)
    BREAK           reduce using rule 3 (instructions -> .)
    CONTINUE        reduce using rule 3 (instructions -> .)
    IF              reduce using rule 3 (instructions -> .)
    FOR             reduce using rule 3 (instructions -> .)
    WHILE           reduce using rule 3 (instructions -> .)
    PRINT           reduce using rule 3 (instructions -> .)
    RETURN          reduce using rule 3 (instructions -> .)
    ID              reduce using rule 3 (instructions -> .)

    instructions                   shift and go to state 19

state 5

    (5) instruction -> BREAK . ;

    ;               shift and go to state 20


state 6

    (6) instruction -> CONTINUE . ;

    ;               shift and go to state 21


state 7

    (7) instruction -> assignment . ;

    ;               shift and go to state 22


state 8

    (8) instruction -> instruction_if .

    {               reduce using rule 8 (instruction -> instruction_if .)
    BREAK           reduce using rule 8 (instruction -> instruction_if .)
    CONTINUE        reduce using rule 8 (instruction -> instruction_if .)
    IF              reduce using rule 8 (instruction -> instruction_if .)
    FOR             reduce using rule 8 (instruction -> instruction_if .)
    WHILE           reduce using rule 8 (instruction -> instruction_if .)
    PRINT           reduce using rule 8 (instruction -> instruction_if .)
    RETURN          reduce using rule 8 (instruction -> instruction_if .)
    ID              reduce using rule 8 (instruction -> instruction_if .)
    $end            reduce using rule 8 (instruction -> instruction_if .)
    }               reduce using rule 8 (instruction -> instruction_if .)
    ELSE            reduce using rule 8 (instruction -> instruction_if .)


state 9

    (9) instruction -> instruction_loop .

    {               reduce using rule 9 (instruction -> instruction_loop .)
    BREAK           reduce using rule 9 (instruction -> instruction_loop .)
    CONTINUE        reduce using rule 9 (instruction -> instruction_loop .)
    IF              reduce using rule 9 (instruction -> instruction_loop .)
    FOR             reduce using rule 9 (instruction -> instruction_loop .)
    WHILE           reduce using rule 9 (instruction -> instruction_loop .)
    PRINT           reduce using rule 9 (instruction -> instruction_loop .)
    RETURN          reduce using rule 9 (instruction -> instruction_loop .)
    ID              reduce using rule 9 (instruction -> instruction_loop .)
    $end            reduce using rule 9 (instruction -> instruction_loop .)
    }               reduce using rule 9 (instruction -> instruction_loop .)
    ELSE            reduce using rule 9 (instruction -> instruction_loop .)


state 10

    (10) instruction -> instruction_print . ;

    ;               shift and go to state 23


state 11

    (11) instruction -> instruction_return . ;

    ;               shift and go to state 24


state 12

    (12) assignment -> identifier . = operations
    (13) assignment -> identifier . ADDITION_ASSIGN operations
    (14) assignment -> identifier . MULTIPLICATION_ASSIGN operations
    (15) assignment -> identifier . SUBTRACTION_ASSIGN operations
    (16) assignment -> identifier . DIVISION_ASSIGN operations

    =               shift and go to state 25
    ADDITION_ASSIGN shift and go to state 26
    MULTIPLICATION_ASSIGN shift and go to state 27
    SUBTRACTION_ASSIGN shift and go to state 28
    DIVISION_ASSIGN shift and go to state 29


state 13

    (17) instruction_if -> IF . ( condition ) instruction
    (18) instruction_if -> IF . ( condition ) instruction ELSE instruction

    (               shift and go to state 30


state 14

    (19) instruction_loop -> FOR . ID = operations : operations instruction

    ID              shift and go to state 31


state 15

    (51) identifier -> ID .
    (52) identifier -> ID . [ operations_list ]

    =               reduce using rule 51 (identifier -> ID .)
    ADDITION_ASSIGN reduce using rule 51 (identifier -> ID .)
    MULTIPLICATION_ASSIGN reduce using rule 51 (identifier -> ID .)
    SUBTRACTION_ASSIGN reduce using rule 51 (identifier -> ID .)
    DIVISION_ASSIGN reduce using rule 51 (identifier -> ID .)
    +               reduce using rule 51 (identifier -> ID .)
    -               reduce using rule 51 (identifier -> ID .)
    *               reduce using rule 51 (identifier -> ID .)
    /               reduce using rule 51 (identifier -> ID .)
    >               reduce using rule 51 (identifier -> ID .)
    <               reduce using rule 51 (identifier -> ID .)
    GREATER_OR_EQUAL reduce using rule 51 (identifier -> ID .)
    LESS_OR_EQUAL   reduce using rule 51 (identifier -> ID .)
    NOT_EQUAL       reduce using rule 51 (identifier -> ID .)
    EQUAL           reduce using rule 51 (identifier -> ID .)
    PLUS_MATRIX     reduce using rule 51 (identifier -> ID .)
    MINUS_MATRIX    reduce using rule 51 (identifier -> ID .)
    MULTIPLY_MATRIX reduce using rule 51 (identifier -> ID .)
    DIVIDE_MATRIX   reduce using rule 51 (identifier -> ID .)
    '               reduce using rule 51 (identifier -> ID .)
    ,               reduce using rule 51 (identifier -> ID .)
    ;               reduce using rule 51 (identifier -> ID .)
    )               reduce using rule 51 (identifier -> ID .)
    ]               reduce using rule 51 (identifier -> ID .)
    :               reduce using rule 51 (identifier -> ID .)
    {               reduce using rule 51 (identifier -> ID .)
    BREAK           reduce using rule 51 (identifier -> ID .)
    CONTINUE        reduce using rule 51 (identifier -> ID .)
    IF              reduce using rule 51 (identifier -> ID .)
    FOR             reduce using rule 51 (identifier -> ID .)
    WHILE           reduce using rule 51 (identifier -> ID .)
    PRINT           reduce using rule 51 (identifier -> ID .)
    RETURN          reduce using rule 51 (identifier -> ID .)
    ID              reduce using rule 51 (identifier -> ID .)
    [               shift and go to state 32


state 16

    (20) instruction_loop -> WHILE . ( condition ) instruction

    (               shift and go to state 33


state 17

    (21) instruction_print -> PRINT . operations_list
    (54) operations_list -> . operations_list , operations
    (55) operations_list -> . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations_list                shift and go to state 34
    operations                     shift and go to state 35
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 18

    (22) instruction_return -> RETURN . operations
    (23) instruction_return -> RETURN .
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    ;               reduce using rule 23 (instruction_return -> RETURN .)
    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 48
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 19

    (4) instruction -> { instructions . }
    (2) instructions -> instructions . instruction
    (4) instruction -> . { instructions }
    (5) instruction -> . BREAK ;
    (6) instruction -> . CONTINUE ;
    (7) instruction -> . assignment ;
    (8) instruction -> . instruction_if
    (9) instruction -> . instruction_loop
    (10) instruction -> . instruction_print ;
    (11) instruction -> . instruction_return ;
    (12) assignment -> . identifier = operations
    (13) assignment -> . identifier ADDITION_ASSIGN operations
    (14) assignment -> . identifier MULTIPLICATION_ASSIGN operations
    (15) assignment -> . identifier SUBTRACTION_ASSIGN operations
    (16) assignment -> . identifier DIVISION_ASSIGN operations
    (17) instruction_if -> . IF ( condition ) instruction
    (18) instruction_if -> . IF ( condition ) instruction ELSE instruction
    (19) instruction_loop -> . FOR ID = operations : operations instruction
    (20) instruction_loop -> . WHILE ( condition ) instruction
    (21) instruction_print -> . PRINT operations_list
    (22) instruction_return -> . RETURN operations
    (23) instruction_return -> . RETURN
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    }               shift and go to state 49
    {               shift and go to state 4
    BREAK           shift and go to state 5
    CONTINUE        shift and go to state 6
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    PRINT           shift and go to state 17
    RETURN          shift and go to state 18
    ID              shift and go to state 15

    instruction                    shift and go to state 3
    assignment                     shift and go to state 7
    instruction_if                 shift and go to state 8
    instruction_loop               shift and go to state 9
    instruction_print              shift and go to state 10
    instruction_return             shift and go to state 11
    identifier                     shift and go to state 12

state 20

    (5) instruction -> BREAK ; .

    {               reduce using rule 5 (instruction -> BREAK ; .)
    BREAK           reduce using rule 5 (instruction -> BREAK ; .)
    CONTINUE        reduce using rule 5 (instruction -> BREAK ; .)
    IF              reduce using rule 5 (instruction -> BREAK ; .)
    FOR             reduce using rule 5 (instruction -> BREAK ; .)
    WHILE           reduce using rule 5 (instruction -> BREAK ; .)
    PRINT           reduce using rule 5 (instruction -> BREAK ; .)
    RETURN          reduce using rule 5 (instruction -> BREAK ; .)
    ID              reduce using rule 5 (instruction -> BREAK ; .)
    $end            reduce using rule 5 (instruction -> BREAK ; .)
    }               reduce using rule 5 (instruction -> BREAK ; .)
    ELSE            reduce using rule 5 (instruction -> BREAK ; .)


state 21

    (6) instruction -> CONTINUE ; .

    {               reduce using rule 6 (instruction -> CONTINUE ; .)
    BREAK           reduce using rule 6 (instruction -> CONTINUE ; .)
    CONTINUE        reduce using rule 6 (instruction -> CONTINUE ; .)
    IF              reduce using rule 6 (instruction -> CONTINUE ; .)
    FOR             reduce using rule 6 (instruction -> CONTINUE ; .)
    WHILE           reduce using rule 6 (instruction -> CONTINUE ; .)
    PRINT           reduce using rule 6 (instruction -> CONTINUE ; .)
    RETURN          reduce using rule 6 (instruction -> CONTINUE ; .)
    ID              reduce using rule 6 (instruction -> CONTINUE ; .)
    $end            reduce using rule 6 (instruction -> CONTINUE ; .)
    }               reduce using rule 6 (instruction -> CONTINUE ; .)
    ELSE            reduce using rule 6 (instruction -> CONTINUE ; .)


state 22

    (7) instruction -> assignment ; .

    {               reduce using rule 7 (instruction -> assignment ; .)
    BREAK           reduce using rule 7 (instruction -> assignment ; .)
    CONTINUE        reduce using rule 7 (instruction -> assignment ; .)
    IF              reduce using rule 7 (instruction -> assignment ; .)
    FOR             reduce using rule 7 (instruction -> assignment ; .)
    WHILE           reduce using rule 7 (instruction -> assignment ; .)
    PRINT           reduce using rule 7 (instruction -> assignment ; .)
    RETURN          reduce using rule 7 (instruction -> assignment ; .)
    ID              reduce using rule 7 (instruction -> assignment ; .)
    $end            reduce using rule 7 (instruction -> assignment ; .)
    }               reduce using rule 7 (instruction -> assignment ; .)
    ELSE            reduce using rule 7 (instruction -> assignment ; .)


state 23

    (10) instruction -> instruction_print ; .

    {               reduce using rule 10 (instruction -> instruction_print ; .)
    BREAK           reduce using rule 10 (instruction -> instruction_print ; .)
    CONTINUE        reduce using rule 10 (instruction -> instruction_print ; .)
    IF              reduce using rule 10 (instruction -> instruction_print ; .)
    FOR             reduce using rule 10 (instruction -> instruction_print ; .)
    WHILE           reduce using rule 10 (instruction -> instruction_print ; .)
    PRINT           reduce using rule 10 (instruction -> instruction_print ; .)
    RETURN          reduce using rule 10 (instruction -> instruction_print ; .)
    ID              reduce using rule 10 (instruction -> instruction_print ; .)
    $end            reduce using rule 10 (instruction -> instruction_print ; .)
    }               reduce using rule 10 (instruction -> instruction_print ; .)
    ELSE            reduce using rule 10 (instruction -> instruction_print ; .)


state 24

    (11) instruction -> instruction_return ; .

    {               reduce using rule 11 (instruction -> instruction_return ; .)
    BREAK           reduce using rule 11 (instruction -> instruction_return ; .)
    CONTINUE        reduce using rule 11 (instruction -> instruction_return ; .)
    IF              reduce using rule 11 (instruction -> instruction_return ; .)
    FOR             reduce using rule 11 (instruction -> instruction_return ; .)
    WHILE           reduce using rule 11 (instruction -> instruction_return ; .)
    PRINT           reduce using rule 11 (instruction -> instruction_return ; .)
    RETURN          reduce using rule 11 (instruction -> instruction_return ; .)
    ID              reduce using rule 11 (instruction -> instruction_return ; .)
    $end            reduce using rule 11 (instruction -> instruction_return ; .)
    }               reduce using rule 11 (instruction -> instruction_return ; .)
    ELSE            reduce using rule 11 (instruction -> instruction_return ; .)


state 25

    (12) assignment -> identifier = . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    identifier                     shift and go to state 47
    operations                     shift and go to state 50
    array                          shift and go to state 38
    value                          shift and go to state 39

state 26

    (13) assignment -> identifier ADDITION_ASSIGN . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    identifier                     shift and go to state 47
    operations                     shift and go to state 51
    array                          shift and go to state 38
    value                          shift and go to state 39

state 27

    (14) assignment -> identifier MULTIPLICATION_ASSIGN . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    identifier                     shift and go to state 47
    operations                     shift and go to state 52
    array                          shift and go to state 38
    value                          shift and go to state 39

state 28

    (15) assignment -> identifier SUBTRACTION_ASSIGN . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    identifier                     shift and go to state 47
    operations                     shift and go to state 53
    array                          shift and go to state 38
    value                          shift and go to state 39

state 29

    (16) assignment -> identifier DIVISION_ASSIGN . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    identifier                     shift and go to state 47
    operations                     shift and go to state 54
    array                          shift and go to state 38
    value                          shift and go to state 39

state 30

    (17) instruction_if -> IF ( . condition ) instruction
    (18) instruction_if -> IF ( . condition ) instruction ELSE instruction
    (24) condition -> . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    condition                      shift and go to state 55
    operations                     shift and go to state 56
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 31

    (19) instruction_loop -> FOR ID . = operations : operations instruction

    =               shift and go to state 57


state 32

    (52) identifier -> ID [ . operations_list ]
    (54) operations_list -> . operations_list , operations
    (55) operations_list -> . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations_list                shift and go to state 58
    operations                     shift and go to state 35
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 33

    (20) instruction_loop -> WHILE ( . condition ) instruction
    (24) condition -> . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    condition                      shift and go to state 59
    operations                     shift and go to state 56
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 34

    (21) instruction_print -> PRINT operations_list .
    (54) operations_list -> operations_list . , operations

    ;               reduce using rule 21 (instruction_print -> PRINT operations_list .)
    ,               shift and go to state 60


state 35

    (55) operations_list -> operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    ,               reduce using rule 55 (operations_list -> operations .)
    ;               reduce using rule 55 (operations_list -> operations .)
    ]               reduce using rule 55 (operations_list -> operations .)
    )               reduce using rule 55 (operations_list -> operations .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    >               shift and go to state 65
    <               shift and go to state 66
    GREATER_OR_EQUAL shift and go to state 67
    LESS_OR_EQUAL   shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    EQUAL           shift and go to state 70
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74
    '               shift and go to state 75


state 36

    (25) operations -> ( . operations )
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 76
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 37

    (43) operations -> - . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 77
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 38

    (41) operations -> array .

    +               reduce using rule 41 (operations -> array .)
    -               reduce using rule 41 (operations -> array .)
    *               reduce using rule 41 (operations -> array .)
    /               reduce using rule 41 (operations -> array .)
    >               reduce using rule 41 (operations -> array .)
    <               reduce using rule 41 (operations -> array .)
    GREATER_OR_EQUAL reduce using rule 41 (operations -> array .)
    LESS_OR_EQUAL   reduce using rule 41 (operations -> array .)
    NOT_EQUAL       reduce using rule 41 (operations -> array .)
    EQUAL           reduce using rule 41 (operations -> array .)
    PLUS_MATRIX     reduce using rule 41 (operations -> array .)
    MINUS_MATRIX    reduce using rule 41 (operations -> array .)
    MULTIPLY_MATRIX reduce using rule 41 (operations -> array .)
    DIVIDE_MATRIX   reduce using rule 41 (operations -> array .)
    '               reduce using rule 41 (operations -> array .)
    ,               reduce using rule 41 (operations -> array .)
    ;               reduce using rule 41 (operations -> array .)
    )               reduce using rule 41 (operations -> array .)
    ]               reduce using rule 41 (operations -> array .)
    :               reduce using rule 41 (operations -> array .)
    {               reduce using rule 41 (operations -> array .)
    BREAK           reduce using rule 41 (operations -> array .)
    CONTINUE        reduce using rule 41 (operations -> array .)
    IF              reduce using rule 41 (operations -> array .)
    FOR             reduce using rule 41 (operations -> array .)
    WHILE           reduce using rule 41 (operations -> array .)
    PRINT           reduce using rule 41 (operations -> array .)
    RETURN          reduce using rule 41 (operations -> array .)
    ID              reduce using rule 41 (operations -> array .)


state 39

    (42) operations -> value .

    +               reduce using rule 42 (operations -> value .)
    -               reduce using rule 42 (operations -> value .)
    *               reduce using rule 42 (operations -> value .)
    /               reduce using rule 42 (operations -> value .)
    >               reduce using rule 42 (operations -> value .)
    <               reduce using rule 42 (operations -> value .)
    GREATER_OR_EQUAL reduce using rule 42 (operations -> value .)
    LESS_OR_EQUAL   reduce using rule 42 (operations -> value .)
    NOT_EQUAL       reduce using rule 42 (operations -> value .)
    EQUAL           reduce using rule 42 (operations -> value .)
    PLUS_MATRIX     reduce using rule 42 (operations -> value .)
    MINUS_MATRIX    reduce using rule 42 (operations -> value .)
    MULTIPLY_MATRIX reduce using rule 42 (operations -> value .)
    DIVIDE_MATRIX   reduce using rule 42 (operations -> value .)
    '               reduce using rule 42 (operations -> value .)
    ,               reduce using rule 42 (operations -> value .)
    ;               reduce using rule 42 (operations -> value .)
    )               reduce using rule 42 (operations -> value .)
    ]               reduce using rule 42 (operations -> value .)
    :               reduce using rule 42 (operations -> value .)
    {               reduce using rule 42 (operations -> value .)
    BREAK           reduce using rule 42 (operations -> value .)
    CONTINUE        reduce using rule 42 (operations -> value .)
    IF              reduce using rule 42 (operations -> value .)
    FOR             reduce using rule 42 (operations -> value .)
    WHILE           reduce using rule 42 (operations -> value .)
    PRINT           reduce using rule 42 (operations -> value .)
    RETURN          reduce using rule 42 (operations -> value .)
    ID              reduce using rule 42 (operations -> value .)


state 40

    (53) array -> [ . operations_list ]
    (54) operations_list -> . operations_list , operations
    (55) operations_list -> . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations_list                shift and go to state 78
    operations                     shift and go to state 35
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 41

    (44) value -> FLOAT .

    +               reduce using rule 44 (value -> FLOAT .)
    -               reduce using rule 44 (value -> FLOAT .)
    *               reduce using rule 44 (value -> FLOAT .)
    /               reduce using rule 44 (value -> FLOAT .)
    >               reduce using rule 44 (value -> FLOAT .)
    <               reduce using rule 44 (value -> FLOAT .)
    GREATER_OR_EQUAL reduce using rule 44 (value -> FLOAT .)
    LESS_OR_EQUAL   reduce using rule 44 (value -> FLOAT .)
    NOT_EQUAL       reduce using rule 44 (value -> FLOAT .)
    EQUAL           reduce using rule 44 (value -> FLOAT .)
    PLUS_MATRIX     reduce using rule 44 (value -> FLOAT .)
    MINUS_MATRIX    reduce using rule 44 (value -> FLOAT .)
    MULTIPLY_MATRIX reduce using rule 44 (value -> FLOAT .)
    DIVIDE_MATRIX   reduce using rule 44 (value -> FLOAT .)
    '               reduce using rule 44 (value -> FLOAT .)
    ,               reduce using rule 44 (value -> FLOAT .)
    ;               reduce using rule 44 (value -> FLOAT .)
    )               reduce using rule 44 (value -> FLOAT .)
    ]               reduce using rule 44 (value -> FLOAT .)
    :               reduce using rule 44 (value -> FLOAT .)
    {               reduce using rule 44 (value -> FLOAT .)
    BREAK           reduce using rule 44 (value -> FLOAT .)
    CONTINUE        reduce using rule 44 (value -> FLOAT .)
    IF              reduce using rule 44 (value -> FLOAT .)
    FOR             reduce using rule 44 (value -> FLOAT .)
    WHILE           reduce using rule 44 (value -> FLOAT .)
    PRINT           reduce using rule 44 (value -> FLOAT .)
    RETURN          reduce using rule 44 (value -> FLOAT .)
    ID              reduce using rule 44 (value -> FLOAT .)


state 42

    (45) value -> INT .

    +               reduce using rule 45 (value -> INT .)
    -               reduce using rule 45 (value -> INT .)
    *               reduce using rule 45 (value -> INT .)
    /               reduce using rule 45 (value -> INT .)
    >               reduce using rule 45 (value -> INT .)
    <               reduce using rule 45 (value -> INT .)
    GREATER_OR_EQUAL reduce using rule 45 (value -> INT .)
    LESS_OR_EQUAL   reduce using rule 45 (value -> INT .)
    NOT_EQUAL       reduce using rule 45 (value -> INT .)
    EQUAL           reduce using rule 45 (value -> INT .)
    PLUS_MATRIX     reduce using rule 45 (value -> INT .)
    MINUS_MATRIX    reduce using rule 45 (value -> INT .)
    MULTIPLY_MATRIX reduce using rule 45 (value -> INT .)
    DIVIDE_MATRIX   reduce using rule 45 (value -> INT .)
    '               reduce using rule 45 (value -> INT .)
    ,               reduce using rule 45 (value -> INT .)
    ;               reduce using rule 45 (value -> INT .)
    )               reduce using rule 45 (value -> INT .)
    ]               reduce using rule 45 (value -> INT .)
    :               reduce using rule 45 (value -> INT .)
    {               reduce using rule 45 (value -> INT .)
    BREAK           reduce using rule 45 (value -> INT .)
    CONTINUE        reduce using rule 45 (value -> INT .)
    IF              reduce using rule 45 (value -> INT .)
    FOR             reduce using rule 45 (value -> INT .)
    WHILE           reduce using rule 45 (value -> INT .)
    PRINT           reduce using rule 45 (value -> INT .)
    RETURN          reduce using rule 45 (value -> INT .)
    ID              reduce using rule 45 (value -> INT .)


state 43

    (46) value -> STRING .

    +               reduce using rule 46 (value -> STRING .)
    -               reduce using rule 46 (value -> STRING .)
    *               reduce using rule 46 (value -> STRING .)
    /               reduce using rule 46 (value -> STRING .)
    >               reduce using rule 46 (value -> STRING .)
    <               reduce using rule 46 (value -> STRING .)
    GREATER_OR_EQUAL reduce using rule 46 (value -> STRING .)
    LESS_OR_EQUAL   reduce using rule 46 (value -> STRING .)
    NOT_EQUAL       reduce using rule 46 (value -> STRING .)
    EQUAL           reduce using rule 46 (value -> STRING .)
    PLUS_MATRIX     reduce using rule 46 (value -> STRING .)
    MINUS_MATRIX    reduce using rule 46 (value -> STRING .)
    MULTIPLY_MATRIX reduce using rule 46 (value -> STRING .)
    DIVIDE_MATRIX   reduce using rule 46 (value -> STRING .)
    '               reduce using rule 46 (value -> STRING .)
    ,               reduce using rule 46 (value -> STRING .)
    ;               reduce using rule 46 (value -> STRING .)
    )               reduce using rule 46 (value -> STRING .)
    ]               reduce using rule 46 (value -> STRING .)
    :               reduce using rule 46 (value -> STRING .)
    {               reduce using rule 46 (value -> STRING .)
    BREAK           reduce using rule 46 (value -> STRING .)
    CONTINUE        reduce using rule 46 (value -> STRING .)
    IF              reduce using rule 46 (value -> STRING .)
    FOR             reduce using rule 46 (value -> STRING .)
    WHILE           reduce using rule 46 (value -> STRING .)
    PRINT           reduce using rule 46 (value -> STRING .)
    RETURN          reduce using rule 46 (value -> STRING .)
    ID              reduce using rule 46 (value -> STRING .)


state 44

    (47) value -> ZEROS . ( operations_list )

    (               shift and go to state 79


state 45

    (48) value -> ONES . ( operations_list )

    (               shift and go to state 80


state 46

    (49) value -> EYE . ( operations_list )

    (               shift and go to state 81


state 47

    (50) value -> identifier .

    +               reduce using rule 50 (value -> identifier .)
    -               reduce using rule 50 (value -> identifier .)
    *               reduce using rule 50 (value -> identifier .)
    /               reduce using rule 50 (value -> identifier .)
    >               reduce using rule 50 (value -> identifier .)
    <               reduce using rule 50 (value -> identifier .)
    GREATER_OR_EQUAL reduce using rule 50 (value -> identifier .)
    LESS_OR_EQUAL   reduce using rule 50 (value -> identifier .)
    NOT_EQUAL       reduce using rule 50 (value -> identifier .)
    EQUAL           reduce using rule 50 (value -> identifier .)
    PLUS_MATRIX     reduce using rule 50 (value -> identifier .)
    MINUS_MATRIX    reduce using rule 50 (value -> identifier .)
    MULTIPLY_MATRIX reduce using rule 50 (value -> identifier .)
    DIVIDE_MATRIX   reduce using rule 50 (value -> identifier .)
    '               reduce using rule 50 (value -> identifier .)
    ,               reduce using rule 50 (value -> identifier .)
    ;               reduce using rule 50 (value -> identifier .)
    )               reduce using rule 50 (value -> identifier .)
    ]               reduce using rule 50 (value -> identifier .)
    :               reduce using rule 50 (value -> identifier .)
    {               reduce using rule 50 (value -> identifier .)
    BREAK           reduce using rule 50 (value -> identifier .)
    CONTINUE        reduce using rule 50 (value -> identifier .)
    IF              reduce using rule 50 (value -> identifier .)
    FOR             reduce using rule 50 (value -> identifier .)
    WHILE           reduce using rule 50 (value -> identifier .)
    PRINT           reduce using rule 50 (value -> identifier .)
    RETURN          reduce using rule 50 (value -> identifier .)
    ID              reduce using rule 50 (value -> identifier .)


state 48

    (22) instruction_return -> RETURN operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    ;               reduce using rule 22 (instruction_return -> RETURN operations .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    >               shift and go to state 65
    <               shift and go to state 66
    GREATER_OR_EQUAL shift and go to state 67
    LESS_OR_EQUAL   shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    EQUAL           shift and go to state 70
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74
    '               shift and go to state 75


state 49

    (4) instruction -> { instructions } .

    {               reduce using rule 4 (instruction -> { instructions } .)
    BREAK           reduce using rule 4 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 4 (instruction -> { instructions } .)
    IF              reduce using rule 4 (instruction -> { instructions } .)
    FOR             reduce using rule 4 (instruction -> { instructions } .)
    WHILE           reduce using rule 4 (instruction -> { instructions } .)
    PRINT           reduce using rule 4 (instruction -> { instructions } .)
    RETURN          reduce using rule 4 (instruction -> { instructions } .)
    ID              reduce using rule 4 (instruction -> { instructions } .)
    $end            reduce using rule 4 (instruction -> { instructions } .)
    }               reduce using rule 4 (instruction -> { instructions } .)
    ELSE            reduce using rule 4 (instruction -> { instructions } .)


state 50

    (12) assignment -> identifier = operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    ;               reduce using rule 12 (assignment -> identifier = operations .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    >               shift and go to state 65
    <               shift and go to state 66
    GREATER_OR_EQUAL shift and go to state 67
    LESS_OR_EQUAL   shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    EQUAL           shift and go to state 70
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74
    '               shift and go to state 75


state 51

    (13) assignment -> identifier ADDITION_ASSIGN operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    ;               reduce using rule 13 (assignment -> identifier ADDITION_ASSIGN operations .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    >               shift and go to state 65
    <               shift and go to state 66
    GREATER_OR_EQUAL shift and go to state 67
    LESS_OR_EQUAL   shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    EQUAL           shift and go to state 70
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74
    '               shift and go to state 75


state 52

    (14) assignment -> identifier MULTIPLICATION_ASSIGN operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    ;               reduce using rule 14 (assignment -> identifier MULTIPLICATION_ASSIGN operations .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    >               shift and go to state 65
    <               shift and go to state 66
    GREATER_OR_EQUAL shift and go to state 67
    LESS_OR_EQUAL   shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    EQUAL           shift and go to state 70
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74
    '               shift and go to state 75


state 53

    (15) assignment -> identifier SUBTRACTION_ASSIGN operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    ;               reduce using rule 15 (assignment -> identifier SUBTRACTION_ASSIGN operations .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    >               shift and go to state 65
    <               shift and go to state 66
    GREATER_OR_EQUAL shift and go to state 67
    LESS_OR_EQUAL   shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    EQUAL           shift and go to state 70
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74
    '               shift and go to state 75


state 54

    (16) assignment -> identifier DIVISION_ASSIGN operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    ;               reduce using rule 16 (assignment -> identifier DIVISION_ASSIGN operations .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    >               shift and go to state 65
    <               shift and go to state 66
    GREATER_OR_EQUAL shift and go to state 67
    LESS_OR_EQUAL   shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    EQUAL           shift and go to state 70
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74
    '               shift and go to state 75


state 55

    (17) instruction_if -> IF ( condition . ) instruction
    (18) instruction_if -> IF ( condition . ) instruction ELSE instruction

    )               shift and go to state 82


state 56

    (24) condition -> operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    )               reduce using rule 24 (condition -> operations .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    >               shift and go to state 65
    <               shift and go to state 66
    GREATER_OR_EQUAL shift and go to state 67
    LESS_OR_EQUAL   shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    EQUAL           shift and go to state 70
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74
    '               shift and go to state 75


state 57

    (19) instruction_loop -> FOR ID = . operations : operations instruction
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 83
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 58

    (52) identifier -> ID [ operations_list . ]
    (54) operations_list -> operations_list . , operations

    ]               shift and go to state 84
    ,               shift and go to state 60


state 59

    (20) instruction_loop -> WHILE ( condition . ) instruction

    )               shift and go to state 85


state 60

    (54) operations_list -> operations_list , . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 86
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 61

    (26) operations -> operations + . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 87
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 62

    (27) operations -> operations - . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 88
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 63

    (28) operations -> operations * . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 89
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 64

    (29) operations -> operations / . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 90
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 65

    (30) operations -> operations > . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 91
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 66

    (31) operations -> operations < . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 92
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 67

    (32) operations -> operations GREATER_OR_EQUAL . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 93
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 68

    (33) operations -> operations LESS_OR_EQUAL . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 94
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 69

    (34) operations -> operations NOT_EQUAL . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 95
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 70

    (35) operations -> operations EQUAL . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 96
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 71

    (36) operations -> operations PLUS_MATRIX . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 97
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 72

    (37) operations -> operations MINUS_MATRIX . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 98
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 73

    (38) operations -> operations MULTIPLY_MATRIX . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 99
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 74

    (39) operations -> operations DIVIDE_MATRIX . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 100
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 75

    (40) operations -> operations ' .

    +               reduce using rule 40 (operations -> operations ' .)
    -               reduce using rule 40 (operations -> operations ' .)
    *               reduce using rule 40 (operations -> operations ' .)
    /               reduce using rule 40 (operations -> operations ' .)
    >               reduce using rule 40 (operations -> operations ' .)
    <               reduce using rule 40 (operations -> operations ' .)
    GREATER_OR_EQUAL reduce using rule 40 (operations -> operations ' .)
    LESS_OR_EQUAL   reduce using rule 40 (operations -> operations ' .)
    NOT_EQUAL       reduce using rule 40 (operations -> operations ' .)
    EQUAL           reduce using rule 40 (operations -> operations ' .)
    PLUS_MATRIX     reduce using rule 40 (operations -> operations ' .)
    MINUS_MATRIX    reduce using rule 40 (operations -> operations ' .)
    MULTIPLY_MATRIX reduce using rule 40 (operations -> operations ' .)
    DIVIDE_MATRIX   reduce using rule 40 (operations -> operations ' .)
    '               reduce using rule 40 (operations -> operations ' .)
    ,               reduce using rule 40 (operations -> operations ' .)
    ;               reduce using rule 40 (operations -> operations ' .)
    )               reduce using rule 40 (operations -> operations ' .)
    ]               reduce using rule 40 (operations -> operations ' .)
    :               reduce using rule 40 (operations -> operations ' .)
    {               reduce using rule 40 (operations -> operations ' .)
    BREAK           reduce using rule 40 (operations -> operations ' .)
    CONTINUE        reduce using rule 40 (operations -> operations ' .)
    IF              reduce using rule 40 (operations -> operations ' .)
    FOR             reduce using rule 40 (operations -> operations ' .)
    WHILE           reduce using rule 40 (operations -> operations ' .)
    PRINT           reduce using rule 40 (operations -> operations ' .)
    RETURN          reduce using rule 40 (operations -> operations ' .)
    ID              reduce using rule 40 (operations -> operations ' .)


state 76

    (25) operations -> ( operations . )
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    )               shift and go to state 101
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    >               shift and go to state 65
    <               shift and go to state 66
    GREATER_OR_EQUAL shift and go to state 67
    LESS_OR_EQUAL   shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    EQUAL           shift and go to state 70
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74
    '               shift and go to state 75


state 77

    (43) operations -> - operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    +               reduce using rule 43 (operations -> - operations .)
    -               reduce using rule 43 (operations -> - operations .)
    *               reduce using rule 43 (operations -> - operations .)
    /               reduce using rule 43 (operations -> - operations .)
    >               reduce using rule 43 (operations -> - operations .)
    <               reduce using rule 43 (operations -> - operations .)
    GREATER_OR_EQUAL reduce using rule 43 (operations -> - operations .)
    LESS_OR_EQUAL   reduce using rule 43 (operations -> - operations .)
    NOT_EQUAL       reduce using rule 43 (operations -> - operations .)
    EQUAL           reduce using rule 43 (operations -> - operations .)
    PLUS_MATRIX     reduce using rule 43 (operations -> - operations .)
    MINUS_MATRIX    reduce using rule 43 (operations -> - operations .)
    MULTIPLY_MATRIX reduce using rule 43 (operations -> - operations .)
    DIVIDE_MATRIX   reduce using rule 43 (operations -> - operations .)
    '               reduce using rule 43 (operations -> - operations .)
    ,               reduce using rule 43 (operations -> - operations .)
    ;               reduce using rule 43 (operations -> - operations .)
    )               reduce using rule 43 (operations -> - operations .)
    ]               reduce using rule 43 (operations -> - operations .)
    :               reduce using rule 43 (operations -> - operations .)
    {               reduce using rule 43 (operations -> - operations .)
    BREAK           reduce using rule 43 (operations -> - operations .)
    CONTINUE        reduce using rule 43 (operations -> - operations .)
    IF              reduce using rule 43 (operations -> - operations .)
    FOR             reduce using rule 43 (operations -> - operations .)
    WHILE           reduce using rule 43 (operations -> - operations .)
    PRINT           reduce using rule 43 (operations -> - operations .)
    RETURN          reduce using rule 43 (operations -> - operations .)
    ID              reduce using rule 43 (operations -> - operations .)

  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]
  ! *               [ shift and go to state 63 ]
  ! /               [ shift and go to state 64 ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 66 ]
  ! GREATER_OR_EQUAL [ shift and go to state 67 ]
  ! LESS_OR_EQUAL   [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! PLUS_MATRIX     [ shift and go to state 71 ]
  ! MINUS_MATRIX    [ shift and go to state 72 ]
  ! MULTIPLY_MATRIX [ shift and go to state 73 ]
  ! DIVIDE_MATRIX   [ shift and go to state 74 ]
  ! '               [ shift and go to state 75 ]


state 78

    (53) array -> [ operations_list . ]
    (54) operations_list -> operations_list . , operations

    ]               shift and go to state 102
    ,               shift and go to state 60


state 79

    (47) value -> ZEROS ( . operations_list )
    (54) operations_list -> . operations_list , operations
    (55) operations_list -> . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations_list                shift and go to state 103
    operations                     shift and go to state 35
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 80

    (48) value -> ONES ( . operations_list )
    (54) operations_list -> . operations_list , operations
    (55) operations_list -> . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations_list                shift and go to state 104
    operations                     shift and go to state 35
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 81

    (49) value -> EYE ( . operations_list )
    (54) operations_list -> . operations_list , operations
    (55) operations_list -> . operations
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations_list                shift and go to state 105
    operations                     shift and go to state 35
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 82

    (17) instruction_if -> IF ( condition ) . instruction
    (18) instruction_if -> IF ( condition ) . instruction ELSE instruction
    (4) instruction -> . { instructions }
    (5) instruction -> . BREAK ;
    (6) instruction -> . CONTINUE ;
    (7) instruction -> . assignment ;
    (8) instruction -> . instruction_if
    (9) instruction -> . instruction_loop
    (10) instruction -> . instruction_print ;
    (11) instruction -> . instruction_return ;
    (12) assignment -> . identifier = operations
    (13) assignment -> . identifier ADDITION_ASSIGN operations
    (14) assignment -> . identifier MULTIPLICATION_ASSIGN operations
    (15) assignment -> . identifier SUBTRACTION_ASSIGN operations
    (16) assignment -> . identifier DIVISION_ASSIGN operations
    (17) instruction_if -> . IF ( condition ) instruction
    (18) instruction_if -> . IF ( condition ) instruction ELSE instruction
    (19) instruction_loop -> . FOR ID = operations : operations instruction
    (20) instruction_loop -> . WHILE ( condition ) instruction
    (21) instruction_print -> . PRINT operations_list
    (22) instruction_return -> . RETURN operations
    (23) instruction_return -> . RETURN
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    {               shift and go to state 4
    BREAK           shift and go to state 5
    CONTINUE        shift and go to state 6
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    PRINT           shift and go to state 17
    RETURN          shift and go to state 18
    ID              shift and go to state 15

    instruction                    shift and go to state 106
    assignment                     shift and go to state 7
    instruction_if                 shift and go to state 8
    instruction_loop               shift and go to state 9
    instruction_print              shift and go to state 10
    instruction_return             shift and go to state 11
    identifier                     shift and go to state 12

state 83

    (19) instruction_loop -> FOR ID = operations . : operations instruction
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    :               shift and go to state 107
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    >               shift and go to state 65
    <               shift and go to state 66
    GREATER_OR_EQUAL shift and go to state 67
    LESS_OR_EQUAL   shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    EQUAL           shift and go to state 70
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74
    '               shift and go to state 75


state 84

    (52) identifier -> ID [ operations_list ] .

    =               reduce using rule 52 (identifier -> ID [ operations_list ] .)
    ADDITION_ASSIGN reduce using rule 52 (identifier -> ID [ operations_list ] .)
    MULTIPLICATION_ASSIGN reduce using rule 52 (identifier -> ID [ operations_list ] .)
    SUBTRACTION_ASSIGN reduce using rule 52 (identifier -> ID [ operations_list ] .)
    DIVISION_ASSIGN reduce using rule 52 (identifier -> ID [ operations_list ] .)
    +               reduce using rule 52 (identifier -> ID [ operations_list ] .)
    -               reduce using rule 52 (identifier -> ID [ operations_list ] .)
    *               reduce using rule 52 (identifier -> ID [ operations_list ] .)
    /               reduce using rule 52 (identifier -> ID [ operations_list ] .)
    >               reduce using rule 52 (identifier -> ID [ operations_list ] .)
    <               reduce using rule 52 (identifier -> ID [ operations_list ] .)
    GREATER_OR_EQUAL reduce using rule 52 (identifier -> ID [ operations_list ] .)
    LESS_OR_EQUAL   reduce using rule 52 (identifier -> ID [ operations_list ] .)
    NOT_EQUAL       reduce using rule 52 (identifier -> ID [ operations_list ] .)
    EQUAL           reduce using rule 52 (identifier -> ID [ operations_list ] .)
    PLUS_MATRIX     reduce using rule 52 (identifier -> ID [ operations_list ] .)
    MINUS_MATRIX    reduce using rule 52 (identifier -> ID [ operations_list ] .)
    MULTIPLY_MATRIX reduce using rule 52 (identifier -> ID [ operations_list ] .)
    DIVIDE_MATRIX   reduce using rule 52 (identifier -> ID [ operations_list ] .)
    '               reduce using rule 52 (identifier -> ID [ operations_list ] .)
    ,               reduce using rule 52 (identifier -> ID [ operations_list ] .)
    ;               reduce using rule 52 (identifier -> ID [ operations_list ] .)
    )               reduce using rule 52 (identifier -> ID [ operations_list ] .)
    ]               reduce using rule 52 (identifier -> ID [ operations_list ] .)
    :               reduce using rule 52 (identifier -> ID [ operations_list ] .)
    {               reduce using rule 52 (identifier -> ID [ operations_list ] .)
    BREAK           reduce using rule 52 (identifier -> ID [ operations_list ] .)
    CONTINUE        reduce using rule 52 (identifier -> ID [ operations_list ] .)
    IF              reduce using rule 52 (identifier -> ID [ operations_list ] .)
    FOR             reduce using rule 52 (identifier -> ID [ operations_list ] .)
    WHILE           reduce using rule 52 (identifier -> ID [ operations_list ] .)
    PRINT           reduce using rule 52 (identifier -> ID [ operations_list ] .)
    RETURN          reduce using rule 52 (identifier -> ID [ operations_list ] .)
    ID              reduce using rule 52 (identifier -> ID [ operations_list ] .)


state 85

    (20) instruction_loop -> WHILE ( condition ) . instruction
    (4) instruction -> . { instructions }
    (5) instruction -> . BREAK ;
    (6) instruction -> . CONTINUE ;
    (7) instruction -> . assignment ;
    (8) instruction -> . instruction_if
    (9) instruction -> . instruction_loop
    (10) instruction -> . instruction_print ;
    (11) instruction -> . instruction_return ;
    (12) assignment -> . identifier = operations
    (13) assignment -> . identifier ADDITION_ASSIGN operations
    (14) assignment -> . identifier MULTIPLICATION_ASSIGN operations
    (15) assignment -> . identifier SUBTRACTION_ASSIGN operations
    (16) assignment -> . identifier DIVISION_ASSIGN operations
    (17) instruction_if -> . IF ( condition ) instruction
    (18) instruction_if -> . IF ( condition ) instruction ELSE instruction
    (19) instruction_loop -> . FOR ID = operations : operations instruction
    (20) instruction_loop -> . WHILE ( condition ) instruction
    (21) instruction_print -> . PRINT operations_list
    (22) instruction_return -> . RETURN operations
    (23) instruction_return -> . RETURN
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    {               shift and go to state 4
    BREAK           shift and go to state 5
    CONTINUE        shift and go to state 6
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    PRINT           shift and go to state 17
    RETURN          shift and go to state 18
    ID              shift and go to state 15

    instruction                    shift and go to state 108
    assignment                     shift and go to state 7
    instruction_if                 shift and go to state 8
    instruction_loop               shift and go to state 9
    instruction_print              shift and go to state 10
    instruction_return             shift and go to state 11
    identifier                     shift and go to state 12

state 86

    (54) operations_list -> operations_list , operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    ,               reduce using rule 54 (operations_list -> operations_list , operations .)
    ;               reduce using rule 54 (operations_list -> operations_list , operations .)
    ]               reduce using rule 54 (operations_list -> operations_list , operations .)
    )               reduce using rule 54 (operations_list -> operations_list , operations .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    >               shift and go to state 65
    <               shift and go to state 66
    GREATER_OR_EQUAL shift and go to state 67
    LESS_OR_EQUAL   shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    EQUAL           shift and go to state 70
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74
    '               shift and go to state 75


state 87

    (26) operations -> operations + operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    +               reduce using rule 26 (operations -> operations + operations .)
    -               reduce using rule 26 (operations -> operations + operations .)
    >               reduce using rule 26 (operations -> operations + operations .)
    <               reduce using rule 26 (operations -> operations + operations .)
    GREATER_OR_EQUAL reduce using rule 26 (operations -> operations + operations .)
    LESS_OR_EQUAL   reduce using rule 26 (operations -> operations + operations .)
    NOT_EQUAL       reduce using rule 26 (operations -> operations + operations .)
    EQUAL           reduce using rule 26 (operations -> operations + operations .)
    PLUS_MATRIX     reduce using rule 26 (operations -> operations + operations .)
    MINUS_MATRIX    reduce using rule 26 (operations -> operations + operations .)
    '               reduce using rule 26 (operations -> operations + operations .)
    ,               reduce using rule 26 (operations -> operations + operations .)
    ;               reduce using rule 26 (operations -> operations + operations .)
    )               reduce using rule 26 (operations -> operations + operations .)
    ]               reduce using rule 26 (operations -> operations + operations .)
    :               reduce using rule 26 (operations -> operations + operations .)
    {               reduce using rule 26 (operations -> operations + operations .)
    BREAK           reduce using rule 26 (operations -> operations + operations .)
    CONTINUE        reduce using rule 26 (operations -> operations + operations .)
    IF              reduce using rule 26 (operations -> operations + operations .)
    FOR             reduce using rule 26 (operations -> operations + operations .)
    WHILE           reduce using rule 26 (operations -> operations + operations .)
    PRINT           reduce using rule 26 (operations -> operations + operations .)
    RETURN          reduce using rule 26 (operations -> operations + operations .)
    ID              reduce using rule 26 (operations -> operations + operations .)
    *               shift and go to state 63
    /               shift and go to state 64
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74

  ! *               [ reduce using rule 26 (operations -> operations + operations .) ]
  ! /               [ reduce using rule 26 (operations -> operations + operations .) ]
  ! MULTIPLY_MATRIX [ reduce using rule 26 (operations -> operations + operations .) ]
  ! DIVIDE_MATRIX   [ reduce using rule 26 (operations -> operations + operations .) ]
  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 66 ]
  ! GREATER_OR_EQUAL [ shift and go to state 67 ]
  ! LESS_OR_EQUAL   [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! PLUS_MATRIX     [ shift and go to state 71 ]
  ! MINUS_MATRIX    [ shift and go to state 72 ]
  ! '               [ shift and go to state 75 ]


state 88

    (27) operations -> operations - operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    +               reduce using rule 27 (operations -> operations - operations .)
    -               reduce using rule 27 (operations -> operations - operations .)
    >               reduce using rule 27 (operations -> operations - operations .)
    <               reduce using rule 27 (operations -> operations - operations .)
    GREATER_OR_EQUAL reduce using rule 27 (operations -> operations - operations .)
    LESS_OR_EQUAL   reduce using rule 27 (operations -> operations - operations .)
    NOT_EQUAL       reduce using rule 27 (operations -> operations - operations .)
    EQUAL           reduce using rule 27 (operations -> operations - operations .)
    PLUS_MATRIX     reduce using rule 27 (operations -> operations - operations .)
    MINUS_MATRIX    reduce using rule 27 (operations -> operations - operations .)
    '               reduce using rule 27 (operations -> operations - operations .)
    ,               reduce using rule 27 (operations -> operations - operations .)
    ;               reduce using rule 27 (operations -> operations - operations .)
    )               reduce using rule 27 (operations -> operations - operations .)
    ]               reduce using rule 27 (operations -> operations - operations .)
    :               reduce using rule 27 (operations -> operations - operations .)
    {               reduce using rule 27 (operations -> operations - operations .)
    BREAK           reduce using rule 27 (operations -> operations - operations .)
    CONTINUE        reduce using rule 27 (operations -> operations - operations .)
    IF              reduce using rule 27 (operations -> operations - operations .)
    FOR             reduce using rule 27 (operations -> operations - operations .)
    WHILE           reduce using rule 27 (operations -> operations - operations .)
    PRINT           reduce using rule 27 (operations -> operations - operations .)
    RETURN          reduce using rule 27 (operations -> operations - operations .)
    ID              reduce using rule 27 (operations -> operations - operations .)
    *               shift and go to state 63
    /               shift and go to state 64
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74

  ! *               [ reduce using rule 27 (operations -> operations - operations .) ]
  ! /               [ reduce using rule 27 (operations -> operations - operations .) ]
  ! MULTIPLY_MATRIX [ reduce using rule 27 (operations -> operations - operations .) ]
  ! DIVIDE_MATRIX   [ reduce using rule 27 (operations -> operations - operations .) ]
  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 66 ]
  ! GREATER_OR_EQUAL [ shift and go to state 67 ]
  ! LESS_OR_EQUAL   [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! PLUS_MATRIX     [ shift and go to state 71 ]
  ! MINUS_MATRIX    [ shift and go to state 72 ]
  ! '               [ shift and go to state 75 ]


state 89

    (28) operations -> operations * operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    +               reduce using rule 28 (operations -> operations * operations .)
    -               reduce using rule 28 (operations -> operations * operations .)
    *               reduce using rule 28 (operations -> operations * operations .)
    /               reduce using rule 28 (operations -> operations * operations .)
    >               reduce using rule 28 (operations -> operations * operations .)
    <               reduce using rule 28 (operations -> operations * operations .)
    GREATER_OR_EQUAL reduce using rule 28 (operations -> operations * operations .)
    LESS_OR_EQUAL   reduce using rule 28 (operations -> operations * operations .)
    NOT_EQUAL       reduce using rule 28 (operations -> operations * operations .)
    EQUAL           reduce using rule 28 (operations -> operations * operations .)
    PLUS_MATRIX     reduce using rule 28 (operations -> operations * operations .)
    MINUS_MATRIX    reduce using rule 28 (operations -> operations * operations .)
    MULTIPLY_MATRIX reduce using rule 28 (operations -> operations * operations .)
    DIVIDE_MATRIX   reduce using rule 28 (operations -> operations * operations .)
    '               reduce using rule 28 (operations -> operations * operations .)
    ,               reduce using rule 28 (operations -> operations * operations .)
    ;               reduce using rule 28 (operations -> operations * operations .)
    )               reduce using rule 28 (operations -> operations * operations .)
    ]               reduce using rule 28 (operations -> operations * operations .)
    :               reduce using rule 28 (operations -> operations * operations .)
    {               reduce using rule 28 (operations -> operations * operations .)
    BREAK           reduce using rule 28 (operations -> operations * operations .)
    CONTINUE        reduce using rule 28 (operations -> operations * operations .)
    IF              reduce using rule 28 (operations -> operations * operations .)
    FOR             reduce using rule 28 (operations -> operations * operations .)
    WHILE           reduce using rule 28 (operations -> operations * operations .)
    PRINT           reduce using rule 28 (operations -> operations * operations .)
    RETURN          reduce using rule 28 (operations -> operations * operations .)
    ID              reduce using rule 28 (operations -> operations * operations .)

  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]
  ! *               [ shift and go to state 63 ]
  ! /               [ shift and go to state 64 ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 66 ]
  ! GREATER_OR_EQUAL [ shift and go to state 67 ]
  ! LESS_OR_EQUAL   [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! PLUS_MATRIX     [ shift and go to state 71 ]
  ! MINUS_MATRIX    [ shift and go to state 72 ]
  ! MULTIPLY_MATRIX [ shift and go to state 73 ]
  ! DIVIDE_MATRIX   [ shift and go to state 74 ]
  ! '               [ shift and go to state 75 ]


state 90

    (29) operations -> operations / operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    +               reduce using rule 29 (operations -> operations / operations .)
    -               reduce using rule 29 (operations -> operations / operations .)
    *               reduce using rule 29 (operations -> operations / operations .)
    /               reduce using rule 29 (operations -> operations / operations .)
    >               reduce using rule 29 (operations -> operations / operations .)
    <               reduce using rule 29 (operations -> operations / operations .)
    GREATER_OR_EQUAL reduce using rule 29 (operations -> operations / operations .)
    LESS_OR_EQUAL   reduce using rule 29 (operations -> operations / operations .)
    NOT_EQUAL       reduce using rule 29 (operations -> operations / operations .)
    EQUAL           reduce using rule 29 (operations -> operations / operations .)
    PLUS_MATRIX     reduce using rule 29 (operations -> operations / operations .)
    MINUS_MATRIX    reduce using rule 29 (operations -> operations / operations .)
    MULTIPLY_MATRIX reduce using rule 29 (operations -> operations / operations .)
    DIVIDE_MATRIX   reduce using rule 29 (operations -> operations / operations .)
    '               reduce using rule 29 (operations -> operations / operations .)
    ,               reduce using rule 29 (operations -> operations / operations .)
    ;               reduce using rule 29 (operations -> operations / operations .)
    )               reduce using rule 29 (operations -> operations / operations .)
    ]               reduce using rule 29 (operations -> operations / operations .)
    :               reduce using rule 29 (operations -> operations / operations .)
    {               reduce using rule 29 (operations -> operations / operations .)
    BREAK           reduce using rule 29 (operations -> operations / operations .)
    CONTINUE        reduce using rule 29 (operations -> operations / operations .)
    IF              reduce using rule 29 (operations -> operations / operations .)
    FOR             reduce using rule 29 (operations -> operations / operations .)
    WHILE           reduce using rule 29 (operations -> operations / operations .)
    PRINT           reduce using rule 29 (operations -> operations / operations .)
    RETURN          reduce using rule 29 (operations -> operations / operations .)
    ID              reduce using rule 29 (operations -> operations / operations .)

  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]
  ! *               [ shift and go to state 63 ]
  ! /               [ shift and go to state 64 ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 66 ]
  ! GREATER_OR_EQUAL [ shift and go to state 67 ]
  ! LESS_OR_EQUAL   [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! PLUS_MATRIX     [ shift and go to state 71 ]
  ! MINUS_MATRIX    [ shift and go to state 72 ]
  ! MULTIPLY_MATRIX [ shift and go to state 73 ]
  ! DIVIDE_MATRIX   [ shift and go to state 74 ]
  ! '               [ shift and go to state 75 ]


state 91

    (30) operations -> operations > operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    >               reduce using rule 30 (operations -> operations > operations .)
    <               reduce using rule 30 (operations -> operations > operations .)
    GREATER_OR_EQUAL reduce using rule 30 (operations -> operations > operations .)
    LESS_OR_EQUAL   reduce using rule 30 (operations -> operations > operations .)
    NOT_EQUAL       reduce using rule 30 (operations -> operations > operations .)
    EQUAL           reduce using rule 30 (operations -> operations > operations .)
    '               reduce using rule 30 (operations -> operations > operations .)
    ,               reduce using rule 30 (operations -> operations > operations .)
    ;               reduce using rule 30 (operations -> operations > operations .)
    )               reduce using rule 30 (operations -> operations > operations .)
    ]               reduce using rule 30 (operations -> operations > operations .)
    :               reduce using rule 30 (operations -> operations > operations .)
    {               reduce using rule 30 (operations -> operations > operations .)
    BREAK           reduce using rule 30 (operations -> operations > operations .)
    CONTINUE        reduce using rule 30 (operations -> operations > operations .)
    IF              reduce using rule 30 (operations -> operations > operations .)
    FOR             reduce using rule 30 (operations -> operations > operations .)
    WHILE           reduce using rule 30 (operations -> operations > operations .)
    PRINT           reduce using rule 30 (operations -> operations > operations .)
    RETURN          reduce using rule 30 (operations -> operations > operations .)
    ID              reduce using rule 30 (operations -> operations > operations .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74

  ! +               [ reduce using rule 30 (operations -> operations > operations .) ]
  ! -               [ reduce using rule 30 (operations -> operations > operations .) ]
  ! *               [ reduce using rule 30 (operations -> operations > operations .) ]
  ! /               [ reduce using rule 30 (operations -> operations > operations .) ]
  ! PLUS_MATRIX     [ reduce using rule 30 (operations -> operations > operations .) ]
  ! MINUS_MATRIX    [ reduce using rule 30 (operations -> operations > operations .) ]
  ! MULTIPLY_MATRIX [ reduce using rule 30 (operations -> operations > operations .) ]
  ! DIVIDE_MATRIX   [ reduce using rule 30 (operations -> operations > operations .) ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 66 ]
  ! GREATER_OR_EQUAL [ shift and go to state 67 ]
  ! LESS_OR_EQUAL   [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! '               [ shift and go to state 75 ]


state 92

    (31) operations -> operations < operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    >               reduce using rule 31 (operations -> operations < operations .)
    <               reduce using rule 31 (operations -> operations < operations .)
    GREATER_OR_EQUAL reduce using rule 31 (operations -> operations < operations .)
    LESS_OR_EQUAL   reduce using rule 31 (operations -> operations < operations .)
    NOT_EQUAL       reduce using rule 31 (operations -> operations < operations .)
    EQUAL           reduce using rule 31 (operations -> operations < operations .)
    '               reduce using rule 31 (operations -> operations < operations .)
    ,               reduce using rule 31 (operations -> operations < operations .)
    ;               reduce using rule 31 (operations -> operations < operations .)
    )               reduce using rule 31 (operations -> operations < operations .)
    ]               reduce using rule 31 (operations -> operations < operations .)
    :               reduce using rule 31 (operations -> operations < operations .)
    {               reduce using rule 31 (operations -> operations < operations .)
    BREAK           reduce using rule 31 (operations -> operations < operations .)
    CONTINUE        reduce using rule 31 (operations -> operations < operations .)
    IF              reduce using rule 31 (operations -> operations < operations .)
    FOR             reduce using rule 31 (operations -> operations < operations .)
    WHILE           reduce using rule 31 (operations -> operations < operations .)
    PRINT           reduce using rule 31 (operations -> operations < operations .)
    RETURN          reduce using rule 31 (operations -> operations < operations .)
    ID              reduce using rule 31 (operations -> operations < operations .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74

  ! +               [ reduce using rule 31 (operations -> operations < operations .) ]
  ! -               [ reduce using rule 31 (operations -> operations < operations .) ]
  ! *               [ reduce using rule 31 (operations -> operations < operations .) ]
  ! /               [ reduce using rule 31 (operations -> operations < operations .) ]
  ! PLUS_MATRIX     [ reduce using rule 31 (operations -> operations < operations .) ]
  ! MINUS_MATRIX    [ reduce using rule 31 (operations -> operations < operations .) ]
  ! MULTIPLY_MATRIX [ reduce using rule 31 (operations -> operations < operations .) ]
  ! DIVIDE_MATRIX   [ reduce using rule 31 (operations -> operations < operations .) ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 66 ]
  ! GREATER_OR_EQUAL [ shift and go to state 67 ]
  ! LESS_OR_EQUAL   [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! '               [ shift and go to state 75 ]


state 93

    (32) operations -> operations GREATER_OR_EQUAL operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    >               reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    <               reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    GREATER_OR_EQUAL reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    LESS_OR_EQUAL   reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    NOT_EQUAL       reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    EQUAL           reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    '               reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    ,               reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    ;               reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    )               reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    ]               reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    :               reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    {               reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    BREAK           reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    CONTINUE        reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    IF              reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    FOR             reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    WHILE           reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    PRINT           reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    RETURN          reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    ID              reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74

  ! +               [ reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .) ]
  ! -               [ reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .) ]
  ! *               [ reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .) ]
  ! /               [ reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .) ]
  ! PLUS_MATRIX     [ reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .) ]
  ! MINUS_MATRIX    [ reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .) ]
  ! MULTIPLY_MATRIX [ reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .) ]
  ! DIVIDE_MATRIX   [ reduce using rule 32 (operations -> operations GREATER_OR_EQUAL operations .) ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 66 ]
  ! GREATER_OR_EQUAL [ shift and go to state 67 ]
  ! LESS_OR_EQUAL   [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! '               [ shift and go to state 75 ]


state 94

    (33) operations -> operations LESS_OR_EQUAL operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    >               reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    <               reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    GREATER_OR_EQUAL reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    LESS_OR_EQUAL   reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    NOT_EQUAL       reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    EQUAL           reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    '               reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    ,               reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    ;               reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    )               reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    ]               reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    :               reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    {               reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    BREAK           reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    CONTINUE        reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    IF              reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    FOR             reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    WHILE           reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    PRINT           reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    RETURN          reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    ID              reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74

  ! +               [ reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .) ]
  ! -               [ reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .) ]
  ! *               [ reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .) ]
  ! /               [ reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .) ]
  ! PLUS_MATRIX     [ reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .) ]
  ! MINUS_MATRIX    [ reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .) ]
  ! MULTIPLY_MATRIX [ reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .) ]
  ! DIVIDE_MATRIX   [ reduce using rule 33 (operations -> operations LESS_OR_EQUAL operations .) ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 66 ]
  ! GREATER_OR_EQUAL [ shift and go to state 67 ]
  ! LESS_OR_EQUAL   [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! '               [ shift and go to state 75 ]


state 95

    (34) operations -> operations NOT_EQUAL operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    NOT_EQUAL       reduce using rule 34 (operations -> operations NOT_EQUAL operations .)
    EQUAL           reduce using rule 34 (operations -> operations NOT_EQUAL operations .)
    '               reduce using rule 34 (operations -> operations NOT_EQUAL operations .)
    ,               reduce using rule 34 (operations -> operations NOT_EQUAL operations .)
    ;               reduce using rule 34 (operations -> operations NOT_EQUAL operations .)
    )               reduce using rule 34 (operations -> operations NOT_EQUAL operations .)
    ]               reduce using rule 34 (operations -> operations NOT_EQUAL operations .)
    :               reduce using rule 34 (operations -> operations NOT_EQUAL operations .)
    {               reduce using rule 34 (operations -> operations NOT_EQUAL operations .)
    BREAK           reduce using rule 34 (operations -> operations NOT_EQUAL operations .)
    CONTINUE        reduce using rule 34 (operations -> operations NOT_EQUAL operations .)
    IF              reduce using rule 34 (operations -> operations NOT_EQUAL operations .)
    FOR             reduce using rule 34 (operations -> operations NOT_EQUAL operations .)
    WHILE           reduce using rule 34 (operations -> operations NOT_EQUAL operations .)
    PRINT           reduce using rule 34 (operations -> operations NOT_EQUAL operations .)
    RETURN          reduce using rule 34 (operations -> operations NOT_EQUAL operations .)
    ID              reduce using rule 34 (operations -> operations NOT_EQUAL operations .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    >               shift and go to state 65
    <               shift and go to state 66
    GREATER_OR_EQUAL shift and go to state 67
    LESS_OR_EQUAL   shift and go to state 68
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74

  ! +               [ reduce using rule 34 (operations -> operations NOT_EQUAL operations .) ]
  ! -               [ reduce using rule 34 (operations -> operations NOT_EQUAL operations .) ]
  ! *               [ reduce using rule 34 (operations -> operations NOT_EQUAL operations .) ]
  ! /               [ reduce using rule 34 (operations -> operations NOT_EQUAL operations .) ]
  ! >               [ reduce using rule 34 (operations -> operations NOT_EQUAL operations .) ]
  ! <               [ reduce using rule 34 (operations -> operations NOT_EQUAL operations .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 34 (operations -> operations NOT_EQUAL operations .) ]
  ! LESS_OR_EQUAL   [ reduce using rule 34 (operations -> operations NOT_EQUAL operations .) ]
  ! PLUS_MATRIX     [ reduce using rule 34 (operations -> operations NOT_EQUAL operations .) ]
  ! MINUS_MATRIX    [ reduce using rule 34 (operations -> operations NOT_EQUAL operations .) ]
  ! MULTIPLY_MATRIX [ reduce using rule 34 (operations -> operations NOT_EQUAL operations .) ]
  ! DIVIDE_MATRIX   [ reduce using rule 34 (operations -> operations NOT_EQUAL operations .) ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! '               [ shift and go to state 75 ]


state 96

    (35) operations -> operations EQUAL operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    NOT_EQUAL       reduce using rule 35 (operations -> operations EQUAL operations .)
    EQUAL           reduce using rule 35 (operations -> operations EQUAL operations .)
    '               reduce using rule 35 (operations -> operations EQUAL operations .)
    ,               reduce using rule 35 (operations -> operations EQUAL operations .)
    ;               reduce using rule 35 (operations -> operations EQUAL operations .)
    )               reduce using rule 35 (operations -> operations EQUAL operations .)
    ]               reduce using rule 35 (operations -> operations EQUAL operations .)
    :               reduce using rule 35 (operations -> operations EQUAL operations .)
    {               reduce using rule 35 (operations -> operations EQUAL operations .)
    BREAK           reduce using rule 35 (operations -> operations EQUAL operations .)
    CONTINUE        reduce using rule 35 (operations -> operations EQUAL operations .)
    IF              reduce using rule 35 (operations -> operations EQUAL operations .)
    FOR             reduce using rule 35 (operations -> operations EQUAL operations .)
    WHILE           reduce using rule 35 (operations -> operations EQUAL operations .)
    PRINT           reduce using rule 35 (operations -> operations EQUAL operations .)
    RETURN          reduce using rule 35 (operations -> operations EQUAL operations .)
    ID              reduce using rule 35 (operations -> operations EQUAL operations .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    >               shift and go to state 65
    <               shift and go to state 66
    GREATER_OR_EQUAL shift and go to state 67
    LESS_OR_EQUAL   shift and go to state 68
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74

  ! +               [ reduce using rule 35 (operations -> operations EQUAL operations .) ]
  ! -               [ reduce using rule 35 (operations -> operations EQUAL operations .) ]
  ! *               [ reduce using rule 35 (operations -> operations EQUAL operations .) ]
  ! /               [ reduce using rule 35 (operations -> operations EQUAL operations .) ]
  ! >               [ reduce using rule 35 (operations -> operations EQUAL operations .) ]
  ! <               [ reduce using rule 35 (operations -> operations EQUAL operations .) ]
  ! GREATER_OR_EQUAL [ reduce using rule 35 (operations -> operations EQUAL operations .) ]
  ! LESS_OR_EQUAL   [ reduce using rule 35 (operations -> operations EQUAL operations .) ]
  ! PLUS_MATRIX     [ reduce using rule 35 (operations -> operations EQUAL operations .) ]
  ! MINUS_MATRIX    [ reduce using rule 35 (operations -> operations EQUAL operations .) ]
  ! MULTIPLY_MATRIX [ reduce using rule 35 (operations -> operations EQUAL operations .) ]
  ! DIVIDE_MATRIX   [ reduce using rule 35 (operations -> operations EQUAL operations .) ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! '               [ shift and go to state 75 ]


state 97

    (36) operations -> operations PLUS_MATRIX operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    +               reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    -               reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    >               reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    <               reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    GREATER_OR_EQUAL reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    LESS_OR_EQUAL   reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    NOT_EQUAL       reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    EQUAL           reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    PLUS_MATRIX     reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    MINUS_MATRIX    reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    '               reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    ,               reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    ;               reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    )               reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    ]               reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    :               reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    {               reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    BREAK           reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    CONTINUE        reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    IF              reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    FOR             reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    WHILE           reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    PRINT           reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    RETURN          reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    ID              reduce using rule 36 (operations -> operations PLUS_MATRIX operations .)
    *               shift and go to state 63
    /               shift and go to state 64
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74

  ! *               [ reduce using rule 36 (operations -> operations PLUS_MATRIX operations .) ]
  ! /               [ reduce using rule 36 (operations -> operations PLUS_MATRIX operations .) ]
  ! MULTIPLY_MATRIX [ reduce using rule 36 (operations -> operations PLUS_MATRIX operations .) ]
  ! DIVIDE_MATRIX   [ reduce using rule 36 (operations -> operations PLUS_MATRIX operations .) ]
  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 66 ]
  ! GREATER_OR_EQUAL [ shift and go to state 67 ]
  ! LESS_OR_EQUAL   [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! PLUS_MATRIX     [ shift and go to state 71 ]
  ! MINUS_MATRIX    [ shift and go to state 72 ]
  ! '               [ shift and go to state 75 ]


state 98

    (37) operations -> operations MINUS_MATRIX operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    +               reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    -               reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    >               reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    <               reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    GREATER_OR_EQUAL reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    LESS_OR_EQUAL   reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    NOT_EQUAL       reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    EQUAL           reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    PLUS_MATRIX     reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    MINUS_MATRIX    reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    '               reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    ,               reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    ;               reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    )               reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    ]               reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    :               reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    {               reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    BREAK           reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    CONTINUE        reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    IF              reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    FOR             reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    WHILE           reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    PRINT           reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    RETURN          reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    ID              reduce using rule 37 (operations -> operations MINUS_MATRIX operations .)
    *               shift and go to state 63
    /               shift and go to state 64
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74

  ! *               [ reduce using rule 37 (operations -> operations MINUS_MATRIX operations .) ]
  ! /               [ reduce using rule 37 (operations -> operations MINUS_MATRIX operations .) ]
  ! MULTIPLY_MATRIX [ reduce using rule 37 (operations -> operations MINUS_MATRIX operations .) ]
  ! DIVIDE_MATRIX   [ reduce using rule 37 (operations -> operations MINUS_MATRIX operations .) ]
  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 66 ]
  ! GREATER_OR_EQUAL [ shift and go to state 67 ]
  ! LESS_OR_EQUAL   [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! PLUS_MATRIX     [ shift and go to state 71 ]
  ! MINUS_MATRIX    [ shift and go to state 72 ]
  ! '               [ shift and go to state 75 ]


state 99

    (38) operations -> operations MULTIPLY_MATRIX operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    +               reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    -               reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    *               reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    /               reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    >               reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    <               reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    GREATER_OR_EQUAL reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    LESS_OR_EQUAL   reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    NOT_EQUAL       reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    EQUAL           reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    PLUS_MATRIX     reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    MINUS_MATRIX    reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    MULTIPLY_MATRIX reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    DIVIDE_MATRIX   reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    '               reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    ,               reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    ;               reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    )               reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    ]               reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    :               reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    {               reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    BREAK           reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    CONTINUE        reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    IF              reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    FOR             reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    WHILE           reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    PRINT           reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    RETURN          reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)
    ID              reduce using rule 38 (operations -> operations MULTIPLY_MATRIX operations .)

  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]
  ! *               [ shift and go to state 63 ]
  ! /               [ shift and go to state 64 ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 66 ]
  ! GREATER_OR_EQUAL [ shift and go to state 67 ]
  ! LESS_OR_EQUAL   [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! PLUS_MATRIX     [ shift and go to state 71 ]
  ! MINUS_MATRIX    [ shift and go to state 72 ]
  ! MULTIPLY_MATRIX [ shift and go to state 73 ]
  ! DIVIDE_MATRIX   [ shift and go to state 74 ]
  ! '               [ shift and go to state 75 ]


state 100

    (39) operations -> operations DIVIDE_MATRIX operations .
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '

    +               reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    -               reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    *               reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    /               reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    >               reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    <               reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    GREATER_OR_EQUAL reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    LESS_OR_EQUAL   reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    NOT_EQUAL       reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    EQUAL           reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    PLUS_MATRIX     reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    MINUS_MATRIX    reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    MULTIPLY_MATRIX reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    DIVIDE_MATRIX   reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    '               reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    ,               reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    ;               reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    )               reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    ]               reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    :               reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    {               reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    BREAK           reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    CONTINUE        reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    IF              reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    FOR             reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    WHILE           reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    PRINT           reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    RETURN          reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)
    ID              reduce using rule 39 (operations -> operations DIVIDE_MATRIX operations .)

  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]
  ! *               [ shift and go to state 63 ]
  ! /               [ shift and go to state 64 ]
  ! >               [ shift and go to state 65 ]
  ! <               [ shift and go to state 66 ]
  ! GREATER_OR_EQUAL [ shift and go to state 67 ]
  ! LESS_OR_EQUAL   [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! PLUS_MATRIX     [ shift and go to state 71 ]
  ! MINUS_MATRIX    [ shift and go to state 72 ]
  ! MULTIPLY_MATRIX [ shift and go to state 73 ]
  ! DIVIDE_MATRIX   [ shift and go to state 74 ]
  ! '               [ shift and go to state 75 ]


state 101

    (25) operations -> ( operations ) .

    +               reduce using rule 25 (operations -> ( operations ) .)
    -               reduce using rule 25 (operations -> ( operations ) .)
    *               reduce using rule 25 (operations -> ( operations ) .)
    /               reduce using rule 25 (operations -> ( operations ) .)
    >               reduce using rule 25 (operations -> ( operations ) .)
    <               reduce using rule 25 (operations -> ( operations ) .)
    GREATER_OR_EQUAL reduce using rule 25 (operations -> ( operations ) .)
    LESS_OR_EQUAL   reduce using rule 25 (operations -> ( operations ) .)
    NOT_EQUAL       reduce using rule 25 (operations -> ( operations ) .)
    EQUAL           reduce using rule 25 (operations -> ( operations ) .)
    PLUS_MATRIX     reduce using rule 25 (operations -> ( operations ) .)
    MINUS_MATRIX    reduce using rule 25 (operations -> ( operations ) .)
    MULTIPLY_MATRIX reduce using rule 25 (operations -> ( operations ) .)
    DIVIDE_MATRIX   reduce using rule 25 (operations -> ( operations ) .)
    '               reduce using rule 25 (operations -> ( operations ) .)
    ,               reduce using rule 25 (operations -> ( operations ) .)
    ;               reduce using rule 25 (operations -> ( operations ) .)
    )               reduce using rule 25 (operations -> ( operations ) .)
    ]               reduce using rule 25 (operations -> ( operations ) .)
    :               reduce using rule 25 (operations -> ( operations ) .)
    {               reduce using rule 25 (operations -> ( operations ) .)
    BREAK           reduce using rule 25 (operations -> ( operations ) .)
    CONTINUE        reduce using rule 25 (operations -> ( operations ) .)
    IF              reduce using rule 25 (operations -> ( operations ) .)
    FOR             reduce using rule 25 (operations -> ( operations ) .)
    WHILE           reduce using rule 25 (operations -> ( operations ) .)
    PRINT           reduce using rule 25 (operations -> ( operations ) .)
    RETURN          reduce using rule 25 (operations -> ( operations ) .)
    ID              reduce using rule 25 (operations -> ( operations ) .)


state 102

    (53) array -> [ operations_list ] .

    +               reduce using rule 53 (array -> [ operations_list ] .)
    -               reduce using rule 53 (array -> [ operations_list ] .)
    *               reduce using rule 53 (array -> [ operations_list ] .)
    /               reduce using rule 53 (array -> [ operations_list ] .)
    >               reduce using rule 53 (array -> [ operations_list ] .)
    <               reduce using rule 53 (array -> [ operations_list ] .)
    GREATER_OR_EQUAL reduce using rule 53 (array -> [ operations_list ] .)
    LESS_OR_EQUAL   reduce using rule 53 (array -> [ operations_list ] .)
    NOT_EQUAL       reduce using rule 53 (array -> [ operations_list ] .)
    EQUAL           reduce using rule 53 (array -> [ operations_list ] .)
    PLUS_MATRIX     reduce using rule 53 (array -> [ operations_list ] .)
    MINUS_MATRIX    reduce using rule 53 (array -> [ operations_list ] .)
    MULTIPLY_MATRIX reduce using rule 53 (array -> [ operations_list ] .)
    DIVIDE_MATRIX   reduce using rule 53 (array -> [ operations_list ] .)
    '               reduce using rule 53 (array -> [ operations_list ] .)
    ,               reduce using rule 53 (array -> [ operations_list ] .)
    ;               reduce using rule 53 (array -> [ operations_list ] .)
    )               reduce using rule 53 (array -> [ operations_list ] .)
    ]               reduce using rule 53 (array -> [ operations_list ] .)
    :               reduce using rule 53 (array -> [ operations_list ] .)
    {               reduce using rule 53 (array -> [ operations_list ] .)
    BREAK           reduce using rule 53 (array -> [ operations_list ] .)
    CONTINUE        reduce using rule 53 (array -> [ operations_list ] .)
    IF              reduce using rule 53 (array -> [ operations_list ] .)
    FOR             reduce using rule 53 (array -> [ operations_list ] .)
    WHILE           reduce using rule 53 (array -> [ operations_list ] .)
    PRINT           reduce using rule 53 (array -> [ operations_list ] .)
    RETURN          reduce using rule 53 (array -> [ operations_list ] .)
    ID              reduce using rule 53 (array -> [ operations_list ] .)


state 103

    (47) value -> ZEROS ( operations_list . )
    (54) operations_list -> operations_list . , operations

    )               shift and go to state 109
    ,               shift and go to state 60


state 104

    (48) value -> ONES ( operations_list . )
    (54) operations_list -> operations_list . , operations

    )               shift and go to state 110
    ,               shift and go to state 60


state 105

    (49) value -> EYE ( operations_list . )
    (54) operations_list -> operations_list . , operations

    )               shift and go to state 111
    ,               shift and go to state 60


state 106

    (17) instruction_if -> IF ( condition ) instruction .
    (18) instruction_if -> IF ( condition ) instruction . ELSE instruction

    {               reduce using rule 17 (instruction_if -> IF ( condition ) instruction .)
    BREAK           reduce using rule 17 (instruction_if -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 17 (instruction_if -> IF ( condition ) instruction .)
    IF              reduce using rule 17 (instruction_if -> IF ( condition ) instruction .)
    FOR             reduce using rule 17 (instruction_if -> IF ( condition ) instruction .)
    WHILE           reduce using rule 17 (instruction_if -> IF ( condition ) instruction .)
    PRINT           reduce using rule 17 (instruction_if -> IF ( condition ) instruction .)
    RETURN          reduce using rule 17 (instruction_if -> IF ( condition ) instruction .)
    ID              reduce using rule 17 (instruction_if -> IF ( condition ) instruction .)
    $end            reduce using rule 17 (instruction_if -> IF ( condition ) instruction .)
    }               reduce using rule 17 (instruction_if -> IF ( condition ) instruction .)
    ELSE            shift and go to state 112

  ! ELSE            [ reduce using rule 17 (instruction_if -> IF ( condition ) instruction .) ]


state 107

    (19) instruction_loop -> FOR ID = operations : . operations instruction
    (25) operations -> . ( operations )
    (26) operations -> . operations + operations
    (27) operations -> . operations - operations
    (28) operations -> . operations * operations
    (29) operations -> . operations / operations
    (30) operations -> . operations > operations
    (31) operations -> . operations < operations
    (32) operations -> . operations GREATER_OR_EQUAL operations
    (33) operations -> . operations LESS_OR_EQUAL operations
    (34) operations -> . operations NOT_EQUAL operations
    (35) operations -> . operations EQUAL operations
    (36) operations -> . operations PLUS_MATRIX operations
    (37) operations -> . operations MINUS_MATRIX operations
    (38) operations -> . operations MULTIPLY_MATRIX operations
    (39) operations -> . operations DIVIDE_MATRIX operations
    (40) operations -> . operations '
    (41) operations -> . array
    (42) operations -> . value
    (43) operations -> . - operations
    (53) array -> . [ operations_list ]
    (44) value -> . FLOAT
    (45) value -> . INT
    (46) value -> . STRING
    (47) value -> . ZEROS ( operations_list )
    (48) value -> . ONES ( operations_list )
    (49) value -> . EYE ( operations_list )
    (50) value -> . identifier
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    (               shift and go to state 36
    -               shift and go to state 37
    [               shift and go to state 40
    FLOAT           shift and go to state 41
    INT             shift and go to state 42
    STRING          shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    ID              shift and go to state 15

    operations                     shift and go to state 113
    array                          shift and go to state 38
    value                          shift and go to state 39
    identifier                     shift and go to state 47

state 108

    (20) instruction_loop -> WHILE ( condition ) instruction .

    {               reduce using rule 20 (instruction_loop -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 20 (instruction_loop -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 20 (instruction_loop -> WHILE ( condition ) instruction .)
    IF              reduce using rule 20 (instruction_loop -> WHILE ( condition ) instruction .)
    FOR             reduce using rule 20 (instruction_loop -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 20 (instruction_loop -> WHILE ( condition ) instruction .)
    PRINT           reduce using rule 20 (instruction_loop -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 20 (instruction_loop -> WHILE ( condition ) instruction .)
    ID              reduce using rule 20 (instruction_loop -> WHILE ( condition ) instruction .)
    $end            reduce using rule 20 (instruction_loop -> WHILE ( condition ) instruction .)
    }               reduce using rule 20 (instruction_loop -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 20 (instruction_loop -> WHILE ( condition ) instruction .)


state 109

    (47) value -> ZEROS ( operations_list ) .

    +               reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    -               reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    *               reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    /               reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    >               reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    <               reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    GREATER_OR_EQUAL reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    LESS_OR_EQUAL   reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    NOT_EQUAL       reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    EQUAL           reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    PLUS_MATRIX     reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    MINUS_MATRIX    reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    MULTIPLY_MATRIX reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    DIVIDE_MATRIX   reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    '               reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    ,               reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    ;               reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    )               reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    ]               reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    :               reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    {               reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    BREAK           reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    CONTINUE        reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    IF              reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    FOR             reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    WHILE           reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    PRINT           reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    RETURN          reduce using rule 47 (value -> ZEROS ( operations_list ) .)
    ID              reduce using rule 47 (value -> ZEROS ( operations_list ) .)


state 110

    (48) value -> ONES ( operations_list ) .

    +               reduce using rule 48 (value -> ONES ( operations_list ) .)
    -               reduce using rule 48 (value -> ONES ( operations_list ) .)
    *               reduce using rule 48 (value -> ONES ( operations_list ) .)
    /               reduce using rule 48 (value -> ONES ( operations_list ) .)
    >               reduce using rule 48 (value -> ONES ( operations_list ) .)
    <               reduce using rule 48 (value -> ONES ( operations_list ) .)
    GREATER_OR_EQUAL reduce using rule 48 (value -> ONES ( operations_list ) .)
    LESS_OR_EQUAL   reduce using rule 48 (value -> ONES ( operations_list ) .)
    NOT_EQUAL       reduce using rule 48 (value -> ONES ( operations_list ) .)
    EQUAL           reduce using rule 48 (value -> ONES ( operations_list ) .)
    PLUS_MATRIX     reduce using rule 48 (value -> ONES ( operations_list ) .)
    MINUS_MATRIX    reduce using rule 48 (value -> ONES ( operations_list ) .)
    MULTIPLY_MATRIX reduce using rule 48 (value -> ONES ( operations_list ) .)
    DIVIDE_MATRIX   reduce using rule 48 (value -> ONES ( operations_list ) .)
    '               reduce using rule 48 (value -> ONES ( operations_list ) .)
    ,               reduce using rule 48 (value -> ONES ( operations_list ) .)
    ;               reduce using rule 48 (value -> ONES ( operations_list ) .)
    )               reduce using rule 48 (value -> ONES ( operations_list ) .)
    ]               reduce using rule 48 (value -> ONES ( operations_list ) .)
    :               reduce using rule 48 (value -> ONES ( operations_list ) .)
    {               reduce using rule 48 (value -> ONES ( operations_list ) .)
    BREAK           reduce using rule 48 (value -> ONES ( operations_list ) .)
    CONTINUE        reduce using rule 48 (value -> ONES ( operations_list ) .)
    IF              reduce using rule 48 (value -> ONES ( operations_list ) .)
    FOR             reduce using rule 48 (value -> ONES ( operations_list ) .)
    WHILE           reduce using rule 48 (value -> ONES ( operations_list ) .)
    PRINT           reduce using rule 48 (value -> ONES ( operations_list ) .)
    RETURN          reduce using rule 48 (value -> ONES ( operations_list ) .)
    ID              reduce using rule 48 (value -> ONES ( operations_list ) .)


state 111

    (49) value -> EYE ( operations_list ) .

    +               reduce using rule 49 (value -> EYE ( operations_list ) .)
    -               reduce using rule 49 (value -> EYE ( operations_list ) .)
    *               reduce using rule 49 (value -> EYE ( operations_list ) .)
    /               reduce using rule 49 (value -> EYE ( operations_list ) .)
    >               reduce using rule 49 (value -> EYE ( operations_list ) .)
    <               reduce using rule 49 (value -> EYE ( operations_list ) .)
    GREATER_OR_EQUAL reduce using rule 49 (value -> EYE ( operations_list ) .)
    LESS_OR_EQUAL   reduce using rule 49 (value -> EYE ( operations_list ) .)
    NOT_EQUAL       reduce using rule 49 (value -> EYE ( operations_list ) .)
    EQUAL           reduce using rule 49 (value -> EYE ( operations_list ) .)
    PLUS_MATRIX     reduce using rule 49 (value -> EYE ( operations_list ) .)
    MINUS_MATRIX    reduce using rule 49 (value -> EYE ( operations_list ) .)
    MULTIPLY_MATRIX reduce using rule 49 (value -> EYE ( operations_list ) .)
    DIVIDE_MATRIX   reduce using rule 49 (value -> EYE ( operations_list ) .)
    '               reduce using rule 49 (value -> EYE ( operations_list ) .)
    ,               reduce using rule 49 (value -> EYE ( operations_list ) .)
    ;               reduce using rule 49 (value -> EYE ( operations_list ) .)
    )               reduce using rule 49 (value -> EYE ( operations_list ) .)
    ]               reduce using rule 49 (value -> EYE ( operations_list ) .)
    :               reduce using rule 49 (value -> EYE ( operations_list ) .)
    {               reduce using rule 49 (value -> EYE ( operations_list ) .)
    BREAK           reduce using rule 49 (value -> EYE ( operations_list ) .)
    CONTINUE        reduce using rule 49 (value -> EYE ( operations_list ) .)
    IF              reduce using rule 49 (value -> EYE ( operations_list ) .)
    FOR             reduce using rule 49 (value -> EYE ( operations_list ) .)
    WHILE           reduce using rule 49 (value -> EYE ( operations_list ) .)
    PRINT           reduce using rule 49 (value -> EYE ( operations_list ) .)
    RETURN          reduce using rule 49 (value -> EYE ( operations_list ) .)
    ID              reduce using rule 49 (value -> EYE ( operations_list ) .)


state 112

    (18) instruction_if -> IF ( condition ) instruction ELSE . instruction
    (4) instruction -> . { instructions }
    (5) instruction -> . BREAK ;
    (6) instruction -> . CONTINUE ;
    (7) instruction -> . assignment ;
    (8) instruction -> . instruction_if
    (9) instruction -> . instruction_loop
    (10) instruction -> . instruction_print ;
    (11) instruction -> . instruction_return ;
    (12) assignment -> . identifier = operations
    (13) assignment -> . identifier ADDITION_ASSIGN operations
    (14) assignment -> . identifier MULTIPLICATION_ASSIGN operations
    (15) assignment -> . identifier SUBTRACTION_ASSIGN operations
    (16) assignment -> . identifier DIVISION_ASSIGN operations
    (17) instruction_if -> . IF ( condition ) instruction
    (18) instruction_if -> . IF ( condition ) instruction ELSE instruction
    (19) instruction_loop -> . FOR ID = operations : operations instruction
    (20) instruction_loop -> . WHILE ( condition ) instruction
    (21) instruction_print -> . PRINT operations_list
    (22) instruction_return -> . RETURN operations
    (23) instruction_return -> . RETURN
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    {               shift and go to state 4
    BREAK           shift and go to state 5
    CONTINUE        shift and go to state 6
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    PRINT           shift and go to state 17
    RETURN          shift and go to state 18
    ID              shift and go to state 15

    instruction                    shift and go to state 114
    assignment                     shift and go to state 7
    instruction_if                 shift and go to state 8
    instruction_loop               shift and go to state 9
    instruction_print              shift and go to state 10
    instruction_return             shift and go to state 11
    identifier                     shift and go to state 12

state 113

    (19) instruction_loop -> FOR ID = operations : operations . instruction
    (26) operations -> operations . + operations
    (27) operations -> operations . - operations
    (28) operations -> operations . * operations
    (29) operations -> operations . / operations
    (30) operations -> operations . > operations
    (31) operations -> operations . < operations
    (32) operations -> operations . GREATER_OR_EQUAL operations
    (33) operations -> operations . LESS_OR_EQUAL operations
    (34) operations -> operations . NOT_EQUAL operations
    (35) operations -> operations . EQUAL operations
    (36) operations -> operations . PLUS_MATRIX operations
    (37) operations -> operations . MINUS_MATRIX operations
    (38) operations -> operations . MULTIPLY_MATRIX operations
    (39) operations -> operations . DIVIDE_MATRIX operations
    (40) operations -> operations . '
    (4) instruction -> . { instructions }
    (5) instruction -> . BREAK ;
    (6) instruction -> . CONTINUE ;
    (7) instruction -> . assignment ;
    (8) instruction -> . instruction_if
    (9) instruction -> . instruction_loop
    (10) instruction -> . instruction_print ;
    (11) instruction -> . instruction_return ;
    (12) assignment -> . identifier = operations
    (13) assignment -> . identifier ADDITION_ASSIGN operations
    (14) assignment -> . identifier MULTIPLICATION_ASSIGN operations
    (15) assignment -> . identifier SUBTRACTION_ASSIGN operations
    (16) assignment -> . identifier DIVISION_ASSIGN operations
    (17) instruction_if -> . IF ( condition ) instruction
    (18) instruction_if -> . IF ( condition ) instruction ELSE instruction
    (19) instruction_loop -> . FOR ID = operations : operations instruction
    (20) instruction_loop -> . WHILE ( condition ) instruction
    (21) instruction_print -> . PRINT operations_list
    (22) instruction_return -> . RETURN operations
    (23) instruction_return -> . RETURN
    (51) identifier -> . ID
    (52) identifier -> . ID [ operations_list ]

    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    >               shift and go to state 65
    <               shift and go to state 66
    GREATER_OR_EQUAL shift and go to state 67
    LESS_OR_EQUAL   shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    EQUAL           shift and go to state 70
    PLUS_MATRIX     shift and go to state 71
    MINUS_MATRIX    shift and go to state 72
    MULTIPLY_MATRIX shift and go to state 73
    DIVIDE_MATRIX   shift and go to state 74
    '               shift and go to state 75
    {               shift and go to state 4
    BREAK           shift and go to state 5
    CONTINUE        shift and go to state 6
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    PRINT           shift and go to state 17
    RETURN          shift and go to state 18
    ID              shift and go to state 15

    instruction                    shift and go to state 115
    assignment                     shift and go to state 7
    instruction_if                 shift and go to state 8
    instruction_loop               shift and go to state 9
    instruction_print              shift and go to state 10
    instruction_return             shift and go to state 11
    identifier                     shift and go to state 12

state 114

    (18) instruction_if -> IF ( condition ) instruction ELSE instruction .

    {               reduce using rule 18 (instruction_if -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 18 (instruction_if -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 18 (instruction_if -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 18 (instruction_if -> IF ( condition ) instruction ELSE instruction .)
    FOR             reduce using rule 18 (instruction_if -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 18 (instruction_if -> IF ( condition ) instruction ELSE instruction .)
    PRINT           reduce using rule 18 (instruction_if -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 18 (instruction_if -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 18 (instruction_if -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 18 (instruction_if -> IF ( condition ) instruction ELSE instruction .)
    }               reduce using rule 18 (instruction_if -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 18 (instruction_if -> IF ( condition ) instruction ELSE instruction .)


state 115

    (19) instruction_loop -> FOR ID = operations : operations instruction .

    {               reduce using rule 19 (instruction_loop -> FOR ID = operations : operations instruction .)
    BREAK           reduce using rule 19 (instruction_loop -> FOR ID = operations : operations instruction .)
    CONTINUE        reduce using rule 19 (instruction_loop -> FOR ID = operations : operations instruction .)
    IF              reduce using rule 19 (instruction_loop -> FOR ID = operations : operations instruction .)
    FOR             reduce using rule 19 (instruction_loop -> FOR ID = operations : operations instruction .)
    WHILE           reduce using rule 19 (instruction_loop -> FOR ID = operations : operations instruction .)
    PRINT           reduce using rule 19 (instruction_loop -> FOR ID = operations : operations instruction .)
    RETURN          reduce using rule 19 (instruction_loop -> FOR ID = operations : operations instruction .)
    ID              reduce using rule 19 (instruction_loop -> FOR ID = operations : operations instruction .)
    $end            reduce using rule 19 (instruction_loop -> FOR ID = operations : operations instruction .)
    }               reduce using rule 19 (instruction_loop -> FOR ID = operations : operations instruction .)
    ELSE            reduce using rule 19 (instruction_loop -> FOR ID = operations : operations instruction .)

